apply plugin: 'com.android.application'
//apply plugin: 'com.tencent.tinker.patch'
//https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
def javaVersion=JavaVersion.VERSION_1_7
def bakPath=file("${buildDir}/bakApk")
android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.aly.tinker"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file('aly.jks')
            storePassword "lwb23814878"
            keyAlias "aly"
            keyPassword "lwb23814878"
        }
    }
    buildTypes {
//        debug {
//            signingConfig signingConfigs.release
//            zipAlignEnabled true
//        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
//        beta {
//            minifyEnabled false
//            //    shrinkResources true
//            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            zipAlignEnabled true
//        }

    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    implementation "com.android.support:multidex:1.0.1"
//        implementation fileTree(dir: 'libs', include: ['*.jar'])
//        testImplementation 'junit:junit:4.12'
//        implementation "com.android.support:appcompat-v7:23.1.1"


        //use to test multiDex
//    compile group: 'com.google.guava', name: 'guava', version: '19.0'
//    compile "org.scala-lang:scala-library:2.11.7"

        //use for local maven test
//        compile("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
//        compile("com.tencent.tinker:aosp-dexutils:${TINKER_VERSION}") { changing = true }
//        compile("com.tencent.tinker:bsdiff-util:${TINKER_VERSION}") { changing = true }
//        compile("com.tencent.tinker:tinker-ziputils:${TINKER_VERSION}") { changing = true }
//        compile("com.tencent.tinker:tinker-commons:${TINKER_VERSION}") { changing = true }
//    }

//    //optional, help to generate the final application
//    provided('com.tencent.tinker:tinker-android-anno:1.9.1')
//    //tinker's main Android lib
//    compile('com.tencent.tinker:tinker-android-lib:1.9.1')
//    compile 'com.android.support:multidex:1.0.1'
}

ext{

    tinkerEnable=true
    tinkerOldApkPath="${bakPath}/"
    tinkerApplyMappingPath="${bakPath}/"
    tinkerApplyResourcePath="${bakPath}/"
    tinkerID="1.0"
}
def getApplyMappingPath()
{
    return ext.tinkerApplyMappingPath
}
def getApplyResourceMappingPath()
{
    return ext.tinkerApplyResourcePath
}
def buildWithTinker()
{
    return ext.tinkerEnable
}
def getTinkerIDValue()
{
    return ext.tinkerID
}
def getOldApkPath()
{
    return ext.tinkerOldApkPath
}
if(buildWithTinker())
{
    //启用tinker
    apply plugin: 'com.tencent.tinker.patch'
    //所有tinker相关的参数配置
    tinkerPatch{
        oldApk=getOldApkPath()//指定oldapk的文件路径
        ignoreWarning =false//是否忽略tinker警告 有警告则终止patch的生成
        useSign=true  //强制patch文件使用签名
        tinkerEnable=buildWithTinker();//指定是否启用tinker
        buildConfig{
            applyMapping=getApplyMappingPath()//指定oldapk打包时所使用的混淆文件
            applyResourceMapping =getApplyResourceMappingPath()//指定oldapk的资源文件
            tinkerID=getTinkerIDValue()//指定TinkerID
            keepDexApply=false//分包使用 一般置为false
        }
        dex{
            dexMode="jar"// jar 4以下/raw 4以上
            pattern=["classes*.dex","assets/secondary-dex-?.jar"]//指定dex文件目录
            loader=["com.example.aly.tinker.MyTinkerApplication"]//指定加载patch文件时用到的类
        }
        lib{
            pattern=["libs/*/*.so"]
        }
        res{
            pattern=["res/*","assets/*","resources.arcs","AndroidManifest.xml"]//指定tinker可以修改的所有资源类型
            ignoreChange=["assets/sample_meta.txt"]//不打入patch文件的部分 不受影响的资源路径
            largeModSize=100 //资源修改大小的默认值（k）超过这个值tinker会使用bsdiffer减少这个体积

        }
        //非必须项
        packageConfig{
            configField("patchMessage","fix the 1.0 version's bugs")
            configField("patchVersion","1.0")

        }

    }

    //是否有多渠道
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }

}

